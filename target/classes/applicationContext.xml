<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
    http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.2.xsd">


	<!-- 开启自动扫包 -->
	<context:component-scan base-package="cn.test">
		<!--指定扫包规则,不扫描@Controller注解的JAVA类,其他的要全部扫描 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	<!-- 启动AOP支持 -->
	<aop:aspectj-autoproxy/>


	<!-- 引入外部数据源配置信息 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:datasource.properties</value>
				<value>classpath:shiro-config.properties</value>
			</list>
		</property>
	</bean>

	<!--  图片上传  -->
<!--	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>-->


	<!-- 配置数据源 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>


	<!--  配置shiro , 引入配置文件  -->
    <import resource="spring-redis.xml"/>
	<import resource="spring-shiro.xml"/>



	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!-- 配置 MyBatis 全局配置文件 -->
		<property name="configLocation" value="classpath:mybatis.cfg.xml"/>
		<!-- 扫描 entity 包，这样在 mapper 中就可以使用简单类名，多个用 ; 隔开 -->
		<property name="typeAliasesPackage" value="cn.test.bean"/>
		<!-- 扫描 sql 配置文件，即 mapper 对应的 xml 文件 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"/>
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 注入 SqlSessionFactory -->
		<!-- 这是推荐配置的项，不要去配置 sqlSessionFactory ，已经被弃用了-->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
		<!-- 给出须要被扫描的 Dao 接口-->
		<property name="basePackage" value="cn.test.dao"/>
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 定义个通知,指定事务管理器 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false"
					   rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false"
					   rollback-for="java.lang.Exception" />
			<tx:method name="insert*" propagation="REQUIRED" read-only="false"
					   rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false"
					   rollback-for="java.lang.Exception" />
			<tx:method name="load*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="search*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
		</tx:attributes>
	</tx:advice>

	<!-- 配置一个切入点 -->
	<aop:config>
		<aop:pointcut id="serviceMethods" expression="(execution(* cn.test.service.impl.*.*(..))))"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"/>
	</aop:config>

</beans>